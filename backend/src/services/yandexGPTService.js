import axios from 'axios';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

class YandexGPTService {
  constructor() {
    this.apiKey = process.env.YANDEX_API_KEY;
    this.folderId = process.env.YANDEX_FOLDER_ID;
    this.baseUrl = 'https://llm.api.cloud.yandex.net/foundationModels/v1/completion';
    
    if (!this.apiKey || !this.folderId) {
      console.warn('YandexGPT API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
  }

  async generateCompletion(prompt, options = {}) {
    if (!this.apiKey || !this.folderId) {
      throw new Error('YandexGPT API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    }

    const request = {
      modelUri: `gpt://${this.folderId}/yandexgpt-lite`,
      completionOptions: {
        temperature: 0.3,
        maxTokens: 1000,
        ...options
      },
      messages: [
        {
          role: 'user',
          text: prompt
        }
      ]
    };

    try {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ YandexGPT API...');
      console.log('üì° URL:', this.baseUrl);
      console.log('üîë API Key:', this.apiKey ? `${this.apiKey.substring(0, 10)}...` : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
      console.log('üìÅ Folder ID:', this.folderId);
      console.log('üìù –ó–∞–ø—Ä–æ—Å:', JSON.stringify(request, null, 2));
      
      const response = await axios.post(this.baseUrl, request, {
        headers: {
          'Authorization': `Api-Key ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT API');
      console.log('üìä –°—Ç–∞—Ç—É—Å:', response.status);
      console.log('üìÑ –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));

      if (response.data?.result?.alternatives?.[0]?.message?.text) {
        return response.data.result.alternatives[0].message.text;
      } else {
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT API');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ YandexGPT API:');
      console.error('üìä –°—Ç–∞—Ç—É—Å:', error.response?.status);
      console.error('üìÑ –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response?.data);
      console.error('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.error('üîó URL:', error.config?.url);
      
      if (error.response?.status === 401) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á YandexGPT');
      } else if (error.response?.status === 403) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ YandexGPT');
      } else if (error.response?.status === 429) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YandexGPT');
      } else if (error.code === 'ECONNABORTED') {
        throw new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT');
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ YandexGPT API: ${error.message}`);
      }
    }
  }

  async analyzeWebsite(url, query) {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–π—Ç –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç—ã –ò–ò-–ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤.

URL —Å–∞–π—Ç–∞: ${url}
–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${query}"

–í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "content": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–∞–π—Ç–∞",
  "score": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (–æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ü–∏—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏),
  "isInAiAnswer": true/false (–ø–æ–ø–∞–¥–µ—Ç –ª–∏ –≤ –æ—Ç–≤–µ—Ç –ò–ò),
  "criteria": {
    "relevance": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å—É),
    "completeness": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (–ø–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞),
    "structure": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å),
    "authority": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (—ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å –∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å),
    "freshness": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏),
    "readability": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (—á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å)
  },
  "strengths": ["—Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1", "—Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2"],
  "weaknesses": ["—Å–ª–∞–±–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1", "—Å–ª–∞–±–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2"],
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3"]
}

–û—Ü–µ–Ω–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
1. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å—É (–Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å)
2. –ö–∞—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –ª–∏ –æ—Ç–≤–µ—Ç)
3. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, —Ç–∞–±–ª–∏—Ü—ã)
4. –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å –∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å (–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∞, –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
5. –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö)
6. –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å (–ø—Ä–æ—Å—Ç–æ—Ç–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è)`;

    try {
      const response = await this.generateCompletion(prompt, {
        temperature: 0.3,
        maxTokens: 1000
      });

      // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –∏ –ø–∞—Ä—Å–∏–º JSON
      const cleanedResponse = this.extractJsonFromMarkdown(response);
      const analysis = JSON.parse(cleanedResponse);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      if (typeof analysis.score !== 'number' || analysis.score < 1 || analysis.score > 10) {
        analysis.score = 5;
      }
      
      if (typeof analysis.isInAiAnswer !== 'boolean') {
        analysis.isInAiAnswer = analysis.score >= 7;
      }
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
      if (!analysis.criteria || typeof analysis.criteria !== 'object') {
        analysis.criteria = {
          relevance: 5,
          completeness: 5,
          structure: 5,
          authority: 5,
          freshness: 5,
          readability: 5
        };
      }
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã
      if (!Array.isArray(analysis.recommendations)) {
        analysis.recommendations = this.getDefaultRecommendations();
      }
      
      if (!Array.isArray(analysis.strengths)) {
        analysis.strengths = [];
      }
      
      if (!Array.isArray(analysis.weaknesses)) {
        analysis.weaknesses = [];
      }

      return analysis;
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ YandexGPT:', parseError);
      
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É
      return await this.performSimpleAnalysis(url, query);
    }
  }

  async performSimpleAnalysis(url, query) {
    const simplePrompt = `–û—Ü–µ–Ω–∏ —Å–∞–π—Ç ${url} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}" –ø–æ —à–∫–∞–ª–µ 1-10. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º.`;
    
    try {
      const scoreResponse = await this.generateCompletion(simplePrompt, {
        temperature: 0.1,
        maxTokens: 10
      });
      
      const score = parseInt(scoreResponse) || 5;
      
      return {
        content: `–ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞ ${url}`,
        score: Math.min(10, Math.max(1, score)),
        isInAiAnswer: score >= 7,
        criteria: {
          relevance: score,
          completeness: score,
          structure: score,
          authority: score,
          freshness: score,
          readability: score
        },
        strengths: ['–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω'],
        weaknesses: ['–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑'],
        recommendations: this.getDefaultRecommendations()
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
      throw error;
    }
  }

  getDefaultRecommendations() {
    return [
      '–î–æ–±–∞–≤—å—Ç–µ —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü —Å—Ç–∞—Ç—å–∏. –ò–ò-–ø–æ–∏—Å–∫–æ–≤–∏–∫–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —Å–∞–π—Ç—ã —Å –ø—Ä—è–º—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.',
      '–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª FAQ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏. –≠—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.',
      '–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON-LD) –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.'
    ];
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ markdown –æ—Ç–≤–µ—Ç–∞
  extractJsonFromMarkdown(text) {
    // –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –∫–æ–¥–∞
    const codeBlockRegex = /```(?:json)?\s*([\s\S]*?)\s*```/g;
    const matches = text.match(codeBlockRegex);
    
    if (matches && matches.length > 0) {
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –∫–æ–¥–∞
      const jsonText = matches[0].replace(/```(?:json)?\s*/, '').replace(/\s*```/, '');
      return jsonText.trim();
    }
    
    // –ò—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å { –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è })
    const jsonRegex = /\{[\s\S]*\}/;
    const jsonMatch = text.match(jsonRegex);
    
    if (jsonMatch) {
      return jsonMatch[0];
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    return text.trim();
  }
}

export default new YandexGPTService();